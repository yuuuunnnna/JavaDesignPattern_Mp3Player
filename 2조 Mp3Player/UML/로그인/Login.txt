Strategy 패턴 : 코드 내의 상태를 클래스로 분류하여 상태에 따라 다른 실행결과가 
만들게 해주는 패턴이다

CheckEmployee, CheckUser, CheckFail의 전략을 클래스로 정의하고, 이들을 하나의 
인터페이스(Authority)로 묶는다. 그리고 Authority가 인터페이스의
메소드를 호출하면, 각 클래스에서 정의된 행위가 수행되는 방식이다.

전략 패턴을 처음에 사용하였는데 전략 패턴은 상속을 대체하려는 목적을 가진다. 그 후 스테이트 패턴을
적용하였다. 스테이트 패턴은 코드 내의 조건문들을 대체하려는 목적으로 사용된다.
로그인 기능의 상태에 따라 다수의 조건문들이 필요하였다. 따라서 전략패턴에 비해
상태 패턴이 더욱 어울려서 선택하게 되었다. 
+ 하지만 두 개의 패턴이 거의 비슷한 형상을 띄우는데 state 패턴은 스스로 변환가능,
strategy 패턴은 외부에서 데이터의 입력이 필요한게 차이점 중 하나였다.
따라서 전략 패턴으로 다시 바꾸게 되었다.

